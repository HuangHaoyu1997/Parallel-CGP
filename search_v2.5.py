'''
导入已经搜索到的cgp individual pickle文件
并且测试其性能
'''
from cProfile import label
import pickle, random, time
import numpy as np
from paves.scenarios.oil_world.oil_world import Oil_World, s_g_example
from paves.scenarios.oil_world.config import Oil_Config
import warnings
import matplotlib.pyplot as plt
from configuration import config
import ray
from utils import bollinger_bands, bollinger_reward, std
warnings.filterwarnings('ignore')

ray.init(num_cpus=config.n_process)
np.random.seed(config.seed)
random.seed(config.seed)

s_g = s_g_example()
OW_config = Oil_Config()
env = Oil_World(OW_config, 1000, 5, 3, 1, 20, 20, 10, smeg_graph=s_g)
env._change_price_para([0.019,0.038,0.124,0.09,0.0044,0.0168,0.0125])

@ray.remote
def rollout(env:Oil_World, policy, target_node=1, bound=0.02):
    def func_wrapper(input):
        #####################################
        ## 调整这里
        #####################################
        # print(input, bound)
        
        tmp1 = policy.eval(*input)
        # tmp = 0 if input[0]/input[1]-1<=bound and input[0]/input[1]-1>=-bound else 1
        # print(tmp, tmp1)
        return [1-tmp1]
        # return [tmp]
    
    env._add_mech(mech_name="new_mech",
                  func=func_wrapper,
                  ########################################
                  ## 调整这里
                  ########################################
                  source_nodes=[8,9,13,14],
                  target_nodes=[target_node])
    rewards = []
    simus = []
    deals = []
    for _ in range(5): # config.rollout_episode
        seed = int(str(time.time()).split('.')[1]) # if not test else config.seed
        random.seed(seed)
        np.random.seed(seed)
        
        env.reset()
        # env.reset_2(0)
        zeros = 0
        deal = []
        for i in range(960):  # max 975
            # print(i, env.market.order_books[0].close)
            obs1, obs2 = env._get_obs()
            a_l = []
            for j, enter in enumerate(env.enters):
                a = enter.rb_1_action(obs2[j][0], env.num_cycle, enter.type, env.price_para_list)
                a_l.append(a)
            env._set_action(a_l)
            if i % 5 == 4:
                deal_amount = env._get_s_g_props_value()[-2]
                deal.append(deal_amount)
            rew = env.step()
            obs1, obs2 = env._get_obs()
            obs1, obs2 = env._scale_obs(obs1, obs2)
            if env.market.order_books[0].t2t_deal_amount == 0:
                zeros += 1
        
        # if zeros > 192:
        #     r1 = 10000
        #     rewards.append(r1)
        #     continue
        
        # 第一种损失函数-标准差
        # r1 = std(env.simu_price)
        
        # 第二种损失函数-布林带平均宽度
        Up, Low = bollinger_bands(env.simu_price, 10, 2)
        r2 = bollinger_reward(Up, Low)
        rewards.append(r2)
        deals.append(np.mean(deal))
        simus.append(env.simu_price)
    
    simus = np.array(simus)
    # print(bound, np.mean(deals))
    return  np.mean(rewards), np.mean(deals), # np.mean(simus, 0), env.real_price

# 画布林带与抑制价格波动之后的曲线
# rr, deal, simu, real = rollout(env, 123, 1, 0.02)
# simu = [62.3362, 64.7532, 63.6598, 58.74,   58.74,   60.9276, 64.4414, 67.2956, 69.0838,
#         72.42,   72.38,   64.54,   57.7,    61.2702, 63.7908, 66.7854, 68.4606, 65.7,
#         67.8882, 70.7648, 72.5286, 72.52,   67.54,   70.3562, 72.1386, 68.9562, 67.1364,
#         63.5684, 66.4028, 65.2462, 67.5692, 69.9934, 67.5264, 69.804,  72.2156, 66.24,
#         60.72,   62.8232, 58.222,  55.4746, 51.5276, 54.0464, 54.08,   56.2628, 58.3316,
#         55.5892, 53.6204, 56.4238, 58.5716, 60.8442, 60.8,    57.1324, 56.1084, 58.6642,
#         56.7322, 56.68,   52.9898, 46.88,   49.9278, 51.7872, 54.0104, 56.2396, 58.2232,
#         60.3818]
# real = [63.41,  70.71, 70.63, 60.16, 58.25, 65.02, 75.07,  90.7,  97.73, 123.93, 118.59, 59.01, 
#         43.35,  59.7,  68.28, 76.19, 78.8,  78.09, 76.12,  85.3,  94.62, 102.47, 89.46,  94.09, 
#         102.91, 93.55, 92.2,  88.22, 94.32, 94.18, 105.76, 97.61, 98.61, 102.99, 97.25,  73.13, 
#         48.57,  57.83, 46.5,  42.16, 33.63, 45.64, 44.94,  49.29, 51.78, 48.15,  48.2,   55.3, 
#         62.89,  67.91, 69.48, 59.01, 54.9,  59.98, 56.44,  56.89, 45.78, 28.0,   40.92,  42.7, 
#         58.14, 66.17, 70.52, 77.1]# , 95.01

# Ups, Lows = bollinger_bands(simu, 10, 2)
# Upr, Lowr = bollinger_bands(real, 10, 2)
# plt.rcParams['font.family'] = 'Times New Roman'
# plt.rcParams['axes.unicode_minus'] = False
# plt.rcParams["font.size"] = 12

# plt.grid(visible=True, which='major', linestyle='-')
# plt.grid(visible=True, which='minor', linestyle='--', alpha=0.5)
# plt.minorticks_on()
# # 绘制拟合线
# plt.plot(list(range(64)), simu, '-', label='simu')
# plt.plot(list(range(64)), real, '-', label='real')

# # 填充置信带
# plt.fill_between(list(range(5,59)), Ups, Lows, alpha=0.2, label='simu_bollinger_bands')
# plt.fill_between(list(range(5,59)), Upr, Lowr, alpha=0.2, label='real_bollinger_bands')
# plt.legend()

# ticks = [0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60]
# labels = ['2006/1', '2007/1', '2008/1', '2009/1', 
#             '2010/1', '2011/1', '2012/1', '2013/1', 
#             '2014/1', '2015/1', '2016/1', '2017/1',
#             '2018/1', '2019/1', '2020/1', '2021/1',]
# plt.xticks(
#     ticks,
#     labels,
#     rotation=45,
#     color='#000000', 
#     fontsize=12,
# )
# plt.xlabel('year', fontsize=15,)
# plt.ylabel('oil price', fontsize=15,)
# plt.savefig('实验一布林带绘制'+'.svg', dpi=300, format='svg',bbox_inches='tight')
# plt.show()

# import os
# file_list = os.listdir('./results/CGP_Oil_dataset/imgs/2022-08-23-17-25-32/')
# indice, scores, tmp = [], [], []
# for d in file_list:
#     index = int(d.split('_')[0])
#     score = float(d.split('_')[1].split('.p')[0])
#     indice.append(index)
#     scores.append(score)
#     tmp.append((index, score))
# sorted_data = sorted(tmp, key=lambda x:x[0])

# 生成随机测试数据集，理论上，不同的表达式输出的测试结果是不一样的，从而挑出不同的表达式
# indice, scores = [], []
# test_data = np.random.rand(100, 4)*1000
# for d in sorted_data:
#     index, score = d
#     with open('./results/CGP_Oil_dataset/pkls/2022-08-23-17-25-32/'+str(index)+'.pkl', 'rb') as f:
#         policy = pickle.load(f)
#         policy = policy[0]
#     tmp_output = [policy.eval(*test_data[i]) for i in range(100)]
#     if tmp_output not in scores:
#         scores.append(tmp_output)
#         indice.append(index)
# print(indice)

indice = [0, 9, 10, 11, 13, 14, 15, 17, 18, 34, 57, 70, 72, 74, 80, 84, 85, 96, 99, 109, 116, 122, 136, 259, 265, 272, 273, 423, 427, 505, 2248, 2258, 2294]

# indice, scores = [], []
# for d in sorted_data:
#     index, score = d
#     if score not in scores:
#         indice.append(index)
#         scores.append(score)
# print(indice, scores)

# 将indice中的所有expression取出来做测试
# policies = []
# for i in indice:
#     with open('./results/CGP_Oil_dataset/pkls/2022-08-23-17-25-32/'+str(i)+'.pkl', 'rb') as f:
#         policy = pickle.load(f)
#         policy = policy[0]
#         policies.append(policy)

# fit_list = [rollout.remote(env, p, 1, 0.02) for p in policies]
# fitness = ray.get(fit_list)
# print(fitness)
# ray.shutdown()


# 画图
# data = [[0, 55.59287605007214],
#         [9, 19.03249185847607],
#         [10, 21.479301642888608],
#         [11, 9.049200177681735],
#         [13, 9.049200177681735],
#         [14, 9.159488999264413],
#         [15, 9.094490207939735],
#         [17, 9.099377785182671],
#         [18, 9.151367695250455],
#         [34, 9.151737234920075],
#         [57, 9.160842196844154],
#         [70, 9.13289283358402],
#         [72, 9.049769550031554],
#         [74, 9.146030554733652],
#         [80, 9.135001305715166],
#         [84, 9.168817614637089],
#         [85, 9.194069161878303],
#         [96, 9.13449791072419],
#         [99, 9.122051447481295],
#         [109, 9.069621879823428],
#         [116, 9.101734667498828],
#         [122, 9.189207123848457],
#         [136, 15.969920839014538],
#         [259, 14.130471077459546],
#         [265, 14.430537810096936],
#         [272, 14.819851282854298],
#         [273, 14.406618049078167],
#         [423, 10.1050558424784],
#         [427, 10.166874285550353],
#         [505, 15.212759283465937],
#         [2248, 14.49319616211064],
#         [2258, 14.172004450732809],
#         [2294, 14.763106062917592]]
# data2 = [[0, 53.1042990088464],
#         [9, 24.360505723926885],
#         [10, 24.538351538529803],
#         [11, 16.86055361043705],
#         [13, 17.443205816438102],
#         [14, 16.604108313335722],
#         [15, 17.278277697246168],
#         [17, 17.205907477357226],
#         [18, 17.386311811750765],
#         [34, 17.489798223461086],
#         [57, 17.270075672718534],
#         [70, 16.91099723112537],
#         [72, 16.957166834596418],
#         [74, 17.00389161863086],
#         [80, 17.528929112940236],
#         [84, 17.29602130560746],
#         [85, 16.867049394890653],
#         [96, 17.156759862667723],
#         [99, 16.304426073698657],
#         [109, 17.321842661425],
#         [116, 17.10660060017789],
#         [122, 17.150757829651518],
#         [136, 20.075941097365973],
#         [259, 18.0568809409832],
#         [265, 17.757515335962733],
#         [272, 17.463491106043097],
#         [273, 17.192762129933673],
#         [423, 17.81198604299876],
#         [427, 17.080236935089022],
#         [505, 18.341510470919562],
#         [2248, 20.10163796134775],
#         [2258, 18.80074671144002],
#         [2294, 19.459488840246024]]

data3 = [(58.573670721049325, 812.5354166666666), (18.972197136498757, 367.9083333333333), (21.27912462071812, 414.1989583333334), 
        (9.049200177681735, 48.74166666666667), (9.044937796625721, 47.365625), (9.15901172951591, 48.69583333333333), 
        (9.124620213924304, 50.016666666666666), (9.137075719117965, 53.494791666666664), (9.082039101673724, 48.516666666666666), 
        (9.117247313657524, 50.699999999999996), (9.083595385977768, 46.94166666666667), (9.176284045952652, 48.14375), 
        (9.142555667502032, 49.60833333333333), (9.145260761409785, 49.829166666666666), (9.110020353286595, 49.74375), 
        (9.100173325270806, 49.118750000000006), (9.125333050430777, 49.48645833333334), (9.167073613687933, 51.50729166666666), 
        (9.149681681733448, 46.775), (9.110833713584372, 47.266666666666666), (9.209889678048757, 50.635416666666664), 
        (9.149672299885356, 48.35208333333333), (16.693772613584656, 260.053125), (13.764311429739797, 184.75416666666666), 
        (14.471121332688957, 199.14166666666668), (13.520836904314924, 186.64479166666666), (13.990387289957548, 192.80937500000002), 
        (10.005223368082767, 259.8791666666667), (10.126504851283977, 257.40104166666663), (15.136396182414595, 340.63854166666664), 
        (14.444317991728491, 444.3208333333334), (14.282674305402598, 434.3885416666667), (14.468834807322796, 440.8260416666667)]

# data = np.array(data)
# data2 = np.array(data2)
data3 = np.array(data3)

# print(data3.shape)

plt.rcParams["font.size"] = 12
plt.rcParams['font.family'] = 'Times New Roman'
plt.grid(visible=True, which='major', linestyle='-')
plt.grid(visible=True, which='minor', linestyle='--', alpha=0.5)
plt.minorticks_on()

plt.plot(indice, data3[:,1]-10*data3[:,0],
         'o-.', 
        markersize=3,
        # color='limegreen', 
        # label='ratio loss', 
        linewidth=1.5,
        )

plt.xlabel('Generation', fontsize=15)
plt.ylabel('Fluctuation and Deal Amount Fitness', fontsize=15)
# plt.savefig('ratio_mech_GA_search'+'.pdf', dpi=300, format='pdf',bbox_inches='tight')
plt.savefig('实验一进化曲线1.1'+'.svg', dpi=300, format='svg',bbox_inches='tight')
plt.show()


# 实验1.2
# 优化0.02这个数

# fit_list = [rollout.remote(env, 123, 1, i) for i in np.arange(0, 0.3, 0.002)]
# fitness = ray.get(fit_list)
# print(fitness)
# ray.shutdown()

# bound = [0.0, 0.002, 0.004, 0.006, 0.008, 0.01, 
#         0.012, 0.014, 0.016, 0.018, 0.02, 0.022,
#         0.024, 0.026, 0.028, 0.03, 0.032, 0.034,
#         0.036, 0.038, 0.04, 0.042, 0.044, 0.046,
#         0.048, 0.05, 0.052, 0.054, 0.056, 0.058,
#         0.06, 0.062, 0.064, 0.066, 0.068, 0.07, 
#         0.072, 0.074, 0.076, 0.078, 0.08, 0.082,
#         0.084, 0.086, 0.088, 0.09, 0.092, 0.094,
#         0.096, 0.098, 0.1, 0.102, 0.104, 0.106,
#         0.108, 0.11, 0.112, 0.114, 0.116, 0.118,
#         0.12, 0.122, 0.124, 0.126, 0.128, 0.13,
#         0.132, 0.134, 0.136, 0.138, 0.14, 0.142,
#         0.144, 0.146, 0.148, 0.15, 0.152, 0.154,
#         0.156, 0.158, 0.16, 0.162, 0.164, 0.166,
#         0.168, 0.17, 0.172, 0.174, 0.176, 0.178,
#         0.18, 0.182, 0.184, 0.186, 0.188, 0.19,
#         0.192, 0.194, 0.196, 0.198, 0.2, 0.202,
#         0.204, 0.206, 0.208, 0.21, 0.212, 0.214,
#         0.216, 0.218, 0.22, 0.222, 0.224, 0.226,
#         0.228, 0.23, 0.232, 0.234, 0.236, 0.238,
#         0.24, 0.242, 0.244, 0.246, 0.248, 0.25,
#         0.252, 0.254, 0.256, 0.258, 0.26, 0.262,
#         0.264, 0.266, 0.268, 0.27, 0.272, 0.274,
#         0.276, 0.278, 0.28, 0.282, 0.284, 0.286,
#         0.288, 0.29,  0.292, 0.294, 0.296, 0.298]
# reward = [(9.049200177681735, 154.20416666666668),  (9.01698931021696, 160.98541666666668),     (9.042223849643362, 180.60833333333332), 
#           (9.355412405560035, 223.08958333333334),  (9.662384565425825, 254.86875),             (10.326935517776956, 292.84791666666666), 
#           (10.830245591597292, 325.96250000000003), (11.353838858645506, 357.31041666666664),   (12.406330932555841, 381.2), 
#           (13.221073283410306, 407.51562500000006), (14.523434551855477, 443.1604166666666),    (15.533020910763886, 471.471875), 
#           (15.727166444312493, 485.0791666666667),  (16.70275512346044, 505.059375),            (17.391461755409637, 515.390625), 
#           (19.756744569413353, 533.8895833333333),  (21.13821781810127, 550.0062500000001),     (21.861273403238247, 562.315625), 
#           (22.506766515211712, 574.4958333333333),  (23.755108044330772, 600.915625),           (23.926353024128726, 608.575), 
#           (26.5932680840471, 626.5229166666667),    (26.83982025957888, 629.9708333333334),     (29.71176770627581, 645.8739583333333), 
#           (30.120458952199023, 655.2739583333333),  (30.14816841925124, 656.303125),            (31.62403932460378, 667.953125), 
#           (32.40691065334072, 679.6833333333333),   (33.89863241578358, 689.9739583333334),     (34.13459276676078, 699.915625), 
#           (35.62580202633992, 701.4291666666666),   (36.94776333982175, 705.6),                 (39.633438459870376, 706.2552083333334), 
#           (42.444126493905706, 707.5802083333334),  (41.5876076309717, 709.0375),               (41.28580943738549, 717.8781250000001), 
#           (44.946014182236624, 724.5875),           (42.48049126463859, 734.5625),              (46.696372231792054, 731.615625), 
#           (43.21108858003326, 741.3770833333334),   (45.51159986993517, 746.0395833333334),     (45.59621648385688, 747.3218750000001), 
#           (47.5732461882155, 752.3281250000001),    (47.988164355626, 756.159375),              (47.80092398876222, 759.5229166666667), 
#           (50.20744050954841, 761.1052083333334),   (52.79493430548365, 759.7229166666666),     (57.01658599347722, 765.58125), 
#           (52.60464331147258, 764.5541666666666),   (58.10883424047555, 768.515625),            (58.07900792230978, 773.6208333333333), 
#           (55.838845637739176, 768.121875),         (58.07013857789011, 773.490625),            (61.36074066522711, 771.7572916666666), 
#           (57.226946702624204, 784.0739583333334),  (55.837547773517215, 779.4020833333333),    (57.42781352117832, 787.0145833333333), 
#           (58.989699308567296, 789.84375),          (58.7271584839601, 792.4072916666668),      (59.08545492143439, 785.5093749999999), 
#           (58.2354756941016, 788.9104166666667),    (59.960045411072464, 792.3291666666667),    (62.78557616445456, 788.5302083333333), 
#           (63.66520223835205, 793.4635416666667),   (60.075745457990685, 794.625),              (66.31152227681075, 790.40625), 
#           (64.76379041109823, 792.8208333333333),   (63.22657177496554, 794.5052083333334),     (66.29359950180171, 798.7333333333333), 
#           (64.0425795635374, 796.65),               (65.61584644216694, 796.1489583333333),     (64.18035355417207, 795.2364583333333), 
#           (64.87128744834521, 794.6864583333333),   (69.80147299704171, 796.8739583333333),     (70.34267454325166, 803.3583333333333), 
#           (63.17397857784191, 802.1291666666667),   (67.76964418366506, 805.4333333333334),     (66.85860989005742, 804.2312499999999), 
#           (69.79385540056008, 805.4124999999999),   (67.2841052482134, 806.5635416666667),      (69.47205820040142, 803.3375), 
#           (67.05521862651456, 801.7604166666667),   (73.64182229043259, 802.1760416666667),     (64.50350683892829, 802.5625), 
#           (74.1041837993154, 801.7364583333333),    (76.82117668589281, 806.4572916666666),     (71.57778413287053, 806.5020833333333), 
#           (72.75169776374906, 807.846875),          (64.90170849849571, 810.8677083333333),     (66.5174596449917, 808.6166666666666), 
#           (70.6748324780041, 808.4843749999999),    (69.34262013227324, 811.7135416666667),     (73.84713221003406, 808.4229166666667), 
#           (67.02329060184623, 811.3989583333333),   (69.70556513192109, 810.9385416666667),     (69.34851026928271, 811.1041666666667), 
#           (69.29079125342723, 810.0677083333334),   (71.81512844707436, 809.6927083333333),     (71.26016198014233, 809.7427083333333), 
#           (79.36211902189254, 806.5125),            (76.37638209496404, 813.65),                (74.71919950963459, 809.8354166666667), 
#           (72.42627113647501, 813.7260416666667),   (68.83264501440573, 812.3114583333333),     (69.35980929886799, 816.2052083333333), 
#           (67.78262120832723, 811.4427083333334),   (74.26094287839562, 811.1697916666667),     (73.62246224525855, 810.35625), 
#           (69.01807818326627, 813.4447916666667),   (70.01388523947753, 813.865625),            (66.86939131782802, 813.6187500000001), 
#           (72.3955759706297, 811.6739583333333),    (71.86995160173873, 811.7302083333334),     (66.5911364852304, 812.4854166666667), 
#           (72.73012915842484, 813.9229166666667),   (69.64850162119578, 814.6979166666666),     (77.52491305847688, 810.2802083333333), 
#           (67.72787674816712, 813.5000000000001),   (70.16727993418297, 811.8677083333334),     (66.06947116058828, 814.9322916666667), 
#           (70.2902811730817, 814.5645833333334),    (68.93429350503484, 812.4979166666666),     (71.1656098475683, 814.2770833333333), 
#           (75.61821880746412, 815.7739583333333),   (69.66064385062694, 811.5375),              (71.9005057231802, 815.0333333333333), 
#           (73.25153161439252, 812.2937499999999),   (71.5856201044339, 813.528125),             (70.02112264461957, 813.0135416666667), 
#           (71.08212810677331, 813.1770833333334),   (68.88840033455095, 814.0614583333333),     (65.83496431850014, 812.653125), 
#           (69.32753724815737, 812.9312499999999),   (67.37211269951526, 816.3218750000001),     (71.4061550242073, 814.8572916666667), 
#           (64.6179216557593, 814.340625),           (66.1078917247131, 812.6625),               (70.65410171247005, 812.4822916666666), 
#           (70.05450447031896, 815.7072916666666),   (70.88357468585147, 812.5697916666667),     (69.84660245398244, 815.1489583333334), 
#           (65.89204283526367, 816.315625),          (72.86783056884553, 814.2552083333333),     (73.64286286714116, 814.5125), 
#           (67.8704772938074, 814.3625),             (71.64882214099131, 812.8697916666667),     (62.939824005637675, 817.0406250000001), 
#           (70.04361185659755, 816.6239583333333),   (65.73954935121334, 812.846875),            (64.37766737025466, 813.2520833333334)]
# reward = np.array(reward)
# fig = plt.figure(figsize=(10, 8), facecolor='#FFFFFF')
# plt.rcParams['font.serif'] = ['Times New Roman'] # 字体使用Times New Roman
# plt.rcParams['axes.unicode_minus'] = False
# plt.rcParams['axes.facecolor'] = '#FFFFFF' # 背景色为cc00ff
# # plt.title('销售量及其增长率图示', color='#ffff00', fontsize=25, y=1.04)


# ax1 = fig.add_subplot(111)
# ax1.grid(visible=True, which='major', linestyle='-')
# ax1.grid(visible=True, which='minor', linestyle='--', alpha=0.5)
# ax1.minorticks_on()
# plt.xlabel('bound', color='#000000', fontsize=15)
# ticks = [0,15,30,45,60,75,90,105,120,135,149]
# labels = ['0', '0.03', '0.06', '0.09', '0.12', '0.15', '0.18', '0.21', '0.24', '0.27', '0.3']
# plt.xticks(ticks, labels, rotation=0, color='#000000', fontsize=12)
# # plt.yticks(color='#B22222', fontsize=15)

# line1, = ax1.plot(reward[:,0], 'o-.', color='#FFC125', markersize=3, linewidth=1, label='avg width')
# ax1.set_ylabel('Avg Bollinger Bands Width', color='#000000', fontsize=15)
# ax1.tick_params(axis='y', color='black', labelsize=12, labelcolor='#000000')

# ax2 = ax1.twinx()
# line2, = ax2.plot(reward[:,1], 'o-.', color='#3399ff', markersize=3, linewidth=1, label='deal amount')
# line3, = ax2.plot(reward[:,1]-10*reward[:,0], 'o-.', color='#ff3366', markersize=3, linewidth=1, label='loss')
# ax2.set_ylabel("Deal Amount", color='#000000', fontsize=15)
# ax2.tick_params(axis='y', color='black', labelsize=12, labelcolor='#000000')
# # for a, b in zip(x, y2):
# #     plt.text(a, b+0.02, '%.2f' % b, ha='center', va='bottom', fontsize=15, color='red')
# lns = [line1, line2, line3]
# labels = [l.get_label() for l in lns]
# plt.legend(lns, labels)
# plt.savefig('实验一最优参数搜索曲线'+'.svg', dpi=300, format='svg',bbox_inches='tight')
# plt.show()



# 实验二
# indice = [0, 9, 10, 11, 13, 14, 15, 17, 18, 34, 57, 70, 72, 74, 80, 84, 85, 96, 99, 109, 116, 122, 136, 259, 265, 272, 273, 423, 427, 505, 2248, 2258, 2294]
# 将indice中的所有expression取出来做测试
# policies = []
# for i in indice:
#     with open('./results/CGP_Oil_dataset/pkls/2022-08-23-17-25-32/'+str(i)+'.pkl', 'rb') as f:
#         policy = pickle.load(f)
#         policy = policy[0]
#         policies.append(policy)

# fit_list = [rollout.remote(env, policy, 12, 0.02) for policy in policies]
# fitness = ray.get(fit_list)
# ray.shutdown()
# print(fitness)
# fitness = [58.1535983608228, 30.808574352821353, 34.76351261744596, 9.049200177681735, 
#             9.37493878984244, 9.468611550109452, 9.30999207477182, 9.425539115156594, 
#             9.328203517030587, 9.259338223099363, 9.421973622044101, 9.422649626817593, 
#             9.282095745664591, 9.30197175624373, 9.38031526013098, 9.454540982245584, 
#             9.371980293966896, 9.62239545745616, 9.440307468992689, 9.418367428495346, 
#             9.182256769623937, 9.408338974395011, 28.41319351782866, 20.844061801093495, 
#             20.61082239739286, 19.945776857569335, 19.55375304396936, 10.529441046152602, 
#             10.514595712175629, 19.954905856856307, 18.33260638361264, 18.31582151175715, 
#             18.07062932343326]
# plt.rcParams["font.size"] = 12
# plt.rcParams['font.family'] = 'Times New Roman'
# plt.grid(visible=True, which='major', linestyle='-')
# plt.grid(visible=True, which='minor', linestyle='--', alpha=0.5)
# plt.minorticks_on()

# plt.plot(indice, fitness,
#          'o-.', 
#         markersize=2,
#         # color='limegreen', 
#         # label='ratio loss', 
#         linewidth=1,
#         )
# plt.xlabel('Generation')
# plt.ylabel('Bollinger Bands Width Loss')
# # plt.savefig('ratio_mech_GA_search'+'.pdf', dpi=300, format='pdf',bbox_inches='tight')
# plt.savefig('实验二进化曲线'+'.svg', dpi=300, format='svg',bbox_inches='tight')
# plt.show()

# rr, simu, real = rollout(env, 123, target_node=12, bound=0.02)
# print(rr, simu, real)